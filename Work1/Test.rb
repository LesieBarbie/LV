# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
require_relative 'genetic_algorithm'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
def get_number_input(prompt, min: nil, max: nil, type: :integer)
  loop do
    print prompt
    input = gets.chomp
    value = type == :integer ? input.to_i : input.to_f
    if (!min || value >= min) && (!max || value <= max)
      return value
    else
      puts "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ#{min ? " –Ω–µ –º–µ–Ω—å—à–µ #{min}" : ""}#{max ? " –∏ –Ω–µ –±–æ–ª—å—à–µ #{max}" : ""}."
    end
  end
end

# –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def main
  puts "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ê–ª–≥–æ—Ä–∏—Ç–º–∞!"

  loop do
    # –ú–µ–Ω—é
    puts "\n–ú–µ–Ω—é:"
    puts "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º"
    puts "2. –í—ã—Ö–æ–¥"
    choice = get_number_input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (1 –∏–ª–∏ 2): ", min: 1, max: 2)

    if choice == 2
      puts "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã"
      break
    end

    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    run_genetic_algorithm
  end
end

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
def run_genetic_algorithm
  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  population_size = get_number_input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: ", min: 1)
  chromosome_length = get_number_input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ö—Ä–æ–º–æ—Å–æ–º—ã: ", min: 1)
  mutation_rate = get_number_input("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏ (–æ—Ç 0 –¥–æ 1): ", min: 0, max: 1, type: :float)
  generations = get_number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π: ", min: 1)

  # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
  puts "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏:"
  puts "1. –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã –±–∏—Ç–æ–≤ (1 -> –ª—É—á—à–µ)"
  puts "2. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã –±–∏—Ç–æ–≤ (0 -> –ª—É—á—à–µ)"
  fitness_function = case get_number_input("–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ", min: 1, max: 2)
                     when 1
                       lambda { |chromosome| chromosome.sum }
                     when 2
                       lambda { |chromosome| chromosome.length - chromosome.sum }
                     end

  # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  ga = GeneticAlgorithm.new(
    population_size,
    chromosome_length,
    mutation_rate,
    fitness_function
  )

  puts "\nüîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...\n"
  puts "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è:"
  ga.population.each_with_index do |chromosome, index|
    puts "  –ò–Ω–¥–∏–≤–∏–¥ #{index + 1}: #{chromosome.join}"
  end
  puts "\n"

  generations.times do |generation|
    puts "=== –ü–æ–∫–æ–ª–µ–Ω–∏–µ #{generation + 1} ==="

    # –≠—Ç–∞–ø 1: –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
    fitness_scores = ga.send(:evaluate_fitness)
    puts "üîç –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏:"
    ga.population.each_with_index do |chromosome, index|
      puts "  –ò–Ω–¥–∏–≤–∏–¥ #{index + 1}: #{chromosome.join} => –ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å = #{fitness_scores[index]}"
    end

    # –≠—Ç–∞–ø 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    ga.send(:log_statistics, fitness_scores)

    # –≠—Ç–∞–ø 3: –û—Ç–±–æ—Ä, —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –∏ –º—É—Ç–∞—Ü–∏—è
    puts "\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏:"
    new_population = []
    fitness_scores.sum.tap do |total_fitness|
      ga.population.size.times do
        parent1 = ga.send(:select_parent, fitness_scores, total_fitness)
        parent2 = ga.send(:select_parent, fitness_scores, total_fitness)
        child = ga.send(:crossover, parent1, parent2)
        mutated_child = ga.send(:mutate, child)

        new_population << mutated_child
        puts "  –†–æ–¥–∏—Ç–µ–ª—å 1: #{parent1.join}"
        puts "  –†–æ–¥–∏—Ç–µ–ª—å 2: #{parent2.join}"
        puts "  –ü–æ—Ç–æ–º–æ–∫ –¥–æ –º—É—Ç–∞—Ü–∏–∏: #{child.join}"
        puts "  –ü–æ—Ç–æ–º–æ–∫ –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–∏: #{mutated_child.join}\n"
      end
    end
    ga.instance_variable_set(:@population, new_population)
  end

  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  puts "\nüéâ –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω!"
  best_solution = ga.best_solution
  puts "–õ—É—á—à–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:"
  puts "–•—Ä–æ–º–æ—Å–æ–º–∞: #{best_solution[:chromosome].join}"
  puts "–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: #{best_solution[:fitness]}"
end

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
main
